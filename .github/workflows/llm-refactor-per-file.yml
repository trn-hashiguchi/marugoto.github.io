name: LLM Refactor (per-file)

on:
  workflow_dispatch:
    inputs:
      target_branch:
        description: "ベースブランチ（デフォルト: develop）"
        required: false
        default: "develop"
      batch_size:
        description: "今回処理するファイル数（推奨: 1）"
        required: false
        default: "1"
        type: number
      include_globs:
        description: "対象に含めるグロブ（カンマ区切り）"
        required: false
        default: "src/**,app/**,lib/**,**/*.py,**/*.js,**/*.ts,**/*.tsx,**/*.php,**/*.go,**/*.java,**/*.cs,**/*.rb,**/*.rs,**/*.kt,**/*.swift"
      exclude_globs:
        description: "除外するグロブ（カンマ区切り）"
        required: false
        default: ".git/**,.github/**,build/**,dist/**,out/**,node_modules/**,vendor/**,public/**,coverage/**,**/*.min.js,**/*.map,**/*.lock,**/*.png,**/*.jpg,**/*.jpeg,**/*.gif,**/*.svg,**/*.pdf,package.json,package-lock.json,yarn.lock,pnpm-lock.yaml,docks/checklists/**,docks/check.md"
      init_only:
        description: "初期化のみ（check.md と各 checklist の雛形作成、リファクタは無し）"
        required: false
        default: false
        type: boolean
      dry_run:
        description: "ドライラン（PR作成・pushなしで動作確認）"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

# 同一refでの同時実行を抑止（連番PRの競合を避ける）
concurrency:
  group: llm-refactor-${{ github.ref }}
  cancel-in-progress: false

jobs:
  prepare:
    name: Prepare targets
    runs-on: ubuntu-latest
    outputs:
      files: ${{ steps.pick.outputs.files }}
    steps:
      - name: Checkout base
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch || 'develop' }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('.github/ci/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r .github/ci/requirements.txt

      - name: Decode GCP SA key (Base64 -> temp file)
        run: |
          mkdir -p "$RUNNER_TEMP"
          echo "${{ secrets.GCP_SA_KEY }}" | base64 -d > "$RUNNER_TEMP/sa-key.json"
          echo "GOOGLE_APPLICATION_CREDENTIALS=$RUNNER_TEMP/sa-key.json" >> $GITHUB_ENV

      - id: pick
        name: Pick next files from docks/check.md
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/sa-key.json
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION }}
        run: |
          python .github/ci/refactor_with_llm.py \
            --mode prepare \
            --target-branch "${{ github.event.inputs.target_branch || 'develop' }}" \
            --batch-size "${{ github.event.inputs.batch_size || '1' }}" \
            --init-only "${{ github.event.inputs.init_only || 'false' }}" \
            --dry-run "${{ github.event.inputs.dry_run || 'false' }}"

  refactor:
    name: Refactor (per file) & PR
    needs: prepare
    if: ${{ needs.prepare.outputs.files != '[]' && needs.prepare.outputs.files != '' && github.event.inputs.init_only != 'true' }}
    runs-on: ubuntu-latest
    strategy:
      # ファイル毎にジョブ化。PR衝突回避のため直列実行
      matrix:
        file: ${{ fromJson(needs.prepare.outputs.files) }}
      max-parallel: 1
    steps:
      - name: Checkout base
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.target_branch || 'develop' }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('.github/ci/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install -U pip
          pip install -r .github/ci/requirements.txt

      - name: Decode GCP SA key (Base64 -> file)
        run: echo "${{ secrets.GCP_SA_KEY }}" | base64 -d > sa-key.json

      - id: refactor
        name: Run LLM refactor for ${{ matrix.file }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/sa-key.json
          GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
          GOOGLE_CLOUD_LOCATION: ${{ secrets.GOOGLE_CLOUD_LOCATION }}
          GEMINI_MODEL: ${{ secrets.GEMINI_MODEL }}
        run: |
          python .github/ci/refactor_with_llm.py \
            --mode refactor-single \
            --file "${{ matrix.file }}" \
            --target-branch "${{ github.event.inputs.target_branch || 'develop' }}"

      - name: Create PR
        if: ${{ steps.refactor.outputs.changed == 'true' && github.event.inputs.dry_run != 'true' }}
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          base: ${{ github.event.inputs.target_branch || 'develop' }}
          branch: "refactor/${{ steps.refactor.outputs.branch_suffix }}"
          title: ${{ steps.refactor.outputs.pr_title }}
          body-path: ${{ steps.refactor.outputs.pr_body_path }}
          commit-message: ${{ steps.refactor.outputs.commit_message }}
          add-paths: |
            ${{ matrix.file }}
            docs/check.md
            docs/checklists/**
            .github/ci/_pr_bodies/**

      - name: No change
        if: ${{ steps.refactor.outputs.changed != 'true' }}
        run: echo "No material changes for ${{ matrix.file }}"
